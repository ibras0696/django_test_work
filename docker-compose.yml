version: '3.8'
services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    entrypoint: ["/app/entrypoint.sh"]
    environment:
      PYTHONUNBUFFERED: '1'
      SECRET_KEY: ${SECRET_KEY:-}
      DEBUG: ${DEBUG:-}
      MAX_QUOTES_PER_SOURCE: ${MAX_QUOTES_PER_SOURCE:-}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-}
    depends_on:
      - migrate
  ngrok:
    image: ngrok/ngrok:latest
    depends_on:
      - web
    # command exposes the web service running in the 'web' container on port 8000
    command: http --log=stdout --authtoken=${NGROK_AUTHTOKEN:-} web:8000
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:-}
    ports:
      - "4040:4040" # ngrok web inspection UI
    restart: unless-stopped
  migrate:
    build: .
    # Run migrations in a separate, one-shot container
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    command: sh -c "python src/manage.py makemigrations --noinput || true && python src/manage.py migrate --noinput"
    environment:
      PYTHONUNBUFFERED: '1'
      SECRET_KEY: ${SECRET_KEY:-}
      DEBUG: ${DEBUG:-}
      MAX_QUOTES_PER_SOURCE: ${MAX_QUOTES_PER_SOURCE:-}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-}
    restart: 'no'
  ngrok-updater:
    image: docker:20.10
    depends_on:
      - ngrok
    volumes:
      - ./:/workdir
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NGROK_HOST: localhost
      NGROK_PORT: 4040
    # ensure curl and jq are available, then run our updater script
  entrypoint: ["sh", "-c", "apk add --no-cache curl jq >/dev/null 2>&1 || true; sh /workdir/scripts/ngrok-updater.sh"]
  restart: "on-failure"

